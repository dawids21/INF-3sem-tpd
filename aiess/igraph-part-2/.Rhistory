Sys.getenv()
setwd('/home/dawid/Projects/INF-3sem-tpd/aiess/igraph-part-2')
getwd().
getwd()
library(igraph)
setwd("/home/mikolaj/downloads/igraph-part-2/")
setwd("/home/dawid/Projects/INF-3sem-tpd/aiess/igraph-part-2")
nodes <- read.csv("d1-nodes.csv", header=T, as.is=T)
links <- read.csv("d1-edges.csv", header=T, as.is=T)
links <- aggregate(links[,3], links[,-3], sum)
links <- links[order(links$from, links$to),]
links
colnames(links)[4] <- "weight"
rownames(links) <- NULL
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
net <- simplify(net, remove.multiple = F, remove.loops = T)
net
# Plotting with igraph: node options (starting with 'vertex.') and edge options
# (starting with 'edge.').
?igraph.plotting
plot(net, edge.arrow.size=.4, edge.curved=.1)
plot(net,
edge.arrow.size=.2, edge.curved=0,
vertex.color="lavender", vertex.frame.color="darkgray",
vertex.label=V(net)$media, vertex.label.color="black",
vertex.label.cex=.7)
# Generate colors based on media type:
colrs <- c("gray", "tomato", "gold")
V(net)$color <- colrs[V(net)$media.type]
# Set node size based on audience size:
V(net)$size <- V(net)$audience.size*0.7
# Set node label color:
V(net)$label.color <- "black"
# Set edge width based on weight:
E(net)$width <- E(net)$weight/6
# Change arrow size and edge color:
E(net)$arrow.size <- .2
E(net)$edge.color <- "gray"
# All visual attributes are stored in the graph
net
plot(net)
E(net)$edge.color <- "green"
plot(net)
E(net)$color <- "green"
plot(net)
# Sometimes, especially with semantic networks, we may be interested in
# plotting only the labels of the nodes:
plot(net, vertex.shape="none", vertex.label=V(net)$media,
vertex.label.font=2, vertex.label.color="black",
vertex.label.cex=.7, edge.color="lightgray")
# Let's color the edges of the graph based on their source node color.
# We'll get the starting node for each edge with "ends()".
ends(net, es=E(net))
edge.start <- ends(net, es=E(net), names=F)[,1]
edge.col <- V(net)$color[edge.start]
plot(net, edge.color=edge.col, edge.curved=.1)
net.bg <- sample_pa(80, 1.2)
V(net.bg)$size <- 8
V(net.bg)$frame.color <- "white"
V(net.bg)$color <- "orange"
V(net.bg)$label <- ""
E(net.bg)$arrow.mode <- 0
plot(net.bg)
# You can set the layout in the plot function:
plot(net.bg, layout=layout_randomly)
# You can set the layout in the plot function:
plot(net.bg, layout=layout_randomly)
# You can set the layout in the plot function:
plot(net.bg, layout=layout_randomly)
# You can set the layout in the plot function:
plot(net.bg, layout=layout_randomly)
plot(net.bg, layout=layout_nicely)
plot(net.bg, layout=layout_nicely)
# Or calculate the vertex coordinates in advance:
l <- layout_in_circle(net.bg)
l
plot(net.bg, layout=l)
# l is simply a matrix of x,y coordinates (N x 2) for the N nodes in the graph.
# You can generate your own:
l <- cbind(1:vcount(net.bg), c(1:vcount(net.bg))**10)
l
plot(net.bg, layout=l)
# Randomly placed vertices
l <- layout_randomly(net.bg)
plot(net.bg, layout=l)
# Circle layout
l <- layout_in_circle(net.bg)
plot(net.bg, layout=l)
# 3D sphere layout
l <- layout_on_sphere(net.bg)
plot(net.bg, layout=l)
# The Fruchterman-Reingold force-directed algorithm
# Nice but slow, most often used in graphs smaller than ~1000 vertices.
l <- layout_with_fr(net.bg)
plot(net.bg, layout=l)
# You will also notice that the layout is not deterministic - different runs
# will result in slightly different configurations. Saving the layout in l
# allows us to get the exact same result multiple times.
par(mfrow=c(2,2), mar=c(1,1,1,1))
plot(net.bg, layout=layout_with_fr)
plot(net.bg, layout=layout_with_fr)
plot(net.bg, layout=l)
plot(net.bg, layout=l)
dev.off()
# Get the layout coordinates:
l <- layout_with_fr(net.bg)
# Normalize them so that they are in the -1, 1 interval:
l <- norm_coords(l, ymin=-1, ymax=1, xmin=-1, xmax=1)
par(mfrow=c(2,2), mar=c(0,0,0,0))
plot(net.bg, rescale=F, layout=l*0.4)
plot(net.bg, rescale=F, layout=l*0.8)
plot(net.bg, rescale=F, layout=l*1.2)
plot(net.bg, rescale=F, layout=l*1.6)
dev.off()
l <- layout_with_kk(net.bg)
plot(net.bg, layout=l)
# Check out all available layouts in igraph:
?igraph::layout_
layouts <- grep("^layout_", ls("package:igraph"), value=TRUE)[-1]
# Remove layouts that do not apply to our graph.
layouts <- layouts[!grepl("bipartite|merge|norm|sugiyama|tree", layouts)]
par(mfrow=c(5,3), mar=c(1,1,1,1))
for (layout in layouts) {
print(layout)
l <- do.call(layout, list(net))
plot(net, edge.arrow.mode=0, layout=l, main=layout) }
dev.off()
plot(net)
E(net)$color <- "gray"
plot(net)
hist(links$weight)
mean(links$weight)
sd(links$weight)
# We can delete edges using delete_edges(net, edges)
cut.off <- mean(links$weight)
net.sp <- delete_edges(net, E(net)[weight<cut.off])
plot(net.sp, layout=layout_components)
E(net)$width <- 2
plot(net,
edge.color=c("darkred", "steelblue")[(E(net)$type=="hyperlink")+1],
vertex.color="gray",
layout=layout_in_circle)
# Another way to delete edges:
net.m <- net - E(net)[E(net)$type=="hyperlink"]
net.h <- net - E(net)[E(net)$type=="mention"]
# Plot the two links separately:
par(mfrow=c(1,2))
plot(net.h, vertex.color="orange", main="Tie: Hyperlink")
plot(net.m, vertex.color="lightblue", main="Tie: Mention")
dev.off()
# Make sure the nodes stay in place in both plots:
par(mfrow=c(1,2),mar=c(1,1,4,1))
l <- layout_with_fr(net)
plot(net.h, vertex.color="orange", layout=l, main="Tie: Hyperlink")
plot(net.m, vertex.color="lightblue", layout=l, main="Tie: Mention")
net.h
dev.off()
# Heatmap of the network matrix:
netm <- get.adjacency(net, attr="weight", sparse=F)
colnames(netm) <- V(net)$media
rownames(netm) <- V(net)$media
palf <- colorRampPalette(c("gold", "darkorange"))
heatmap(netm[,17:1],
Rowv = NA,
Colv = NA,
col = palf(20),
scale="none",
margins=c(10,10) )
nodes2 <- read.csv("d2-nodes.csv", header=T, as.is=T)
links2 <- read.csv("d2-edges.csv", header=T, row.names=1)
net2 <- graph_from_incidence_matrix(links2)
head(nodes2)
head(links2)
net2
plot(net2)
# This time we will make nodes look different based on their type.
V(net2)$color <- c("steelblue", "orange")[V(net2)$type+1]
V(net2)$shape <- c("square", "circle")[V(net2)$type+1]
V(net2)$label <- ""
V(net2)$label[V(net2)$type==F] <- nodes2$media[V(net2)$type==F]
V(net2)$label.cex=.6
V(net2)$label.font=2
plot(net2, vertex.label.color="white", vertex.size=(2-V(net2)$type)*8)
plot(net2, vertex.label=NA, vertex.size=7, layout=layout_as_bipartite)
# Using text as nodes:
par(mar=c(0,0,0,0))
plot(net2, vertex.shape="none", vertex.label=nodes2$media,
vertex.label.color=V(net2)$color, vertex.label.font=2,
vertex.label.cex=.95, edge.color="gray70",  edge.width=2)
dev.off()
# Density
# The proportion of present edges from all possible ties.
edge_density(net, loops=F)
ecount(net)/(vcount(net)*(vcount(net)-1)) #for a directed network
# Reciprocity
# The proportion of reciprocated ties (for a directed network).
reciprocity(net)
dyad_census(net) # Mutual, asymmetric, and null node pairs
# Transitivity
# global - ratio of triangles (direction disregarded) to connected triples
# local - ratio of triangles to connected triples each vertex is part of
transitivity(net, type="global")  # net is treated as an undirected network
transitivity(as.undirected(net, mode="collapse")) # same as above
transitivity(net, type="local")
triad_census(net) # for directed networks
# Diameter (longest geodesic distance)
# Note that edge weights are used by default, unless set to NA.
diameter(net, directed=F, weights=NA)
diameter(net, directed=F)
diam <- get_diameter(net, directed=T)
diam
# Note: vertex sequences asked to behave as a vector produce numeric index of nodes
class(diam)
as.vector(diam)
# Color nodes along the diameter:
vcol <- rep("gray", vcount(net))
vcol[diam] <- "gold"
ecol <- rep("lightblue", ecount(net))
ecol[E(net, path=diam)] <- "orange" # E(net, path=diam) finds edges along a path, here 'diam'
plot(net, vertex.color=vcol, edge.color=ecol, edge.arrow.mode=0, layout=layout_nicely)
# Node degrees
# 'degree' has a mode of 'in' for in-degree, 'out' for out-degree,
# and 'all' or 'total' for total degree.
deg <- degree(net, mode="all")
deg
plot(net, vertex.size=deg*3)
hist(deg, breaks=1:vcount(net)-1, main="Histogram of node degree")
# Degree distribution
deg.dist <- degree_distribution(net, cumulative=T, mode="all")
deg.dist
plot( x=0:max(deg), y=1-deg.dist, pch=19, cex=1.2, col="orange",
xlab="Degree", ylab="Cumulative Frequency")
# Degree (number of ties)
degree(net, mode="in")
centr_degree(net, mode="in", normalized=T)
# Closeness (centrality based on distance to others in the graph)
# Inverse of the node's average geodesic distance to others in the network
closeness(net, mode="all", weights=NA)
centr_clo(net, mode="all", normalized=T)
# Eigenvector (centrality proportional to the sum of connection centralities)
# Values of the first eigenvector of the graph adjacency matrix
eigen_centrality(net, directed=T, weights=NA)
centr_eigen(net, directed=T, normalized=T)
# Betweenness (centrality based on a broker position connecting others)
# (Number of geodesics that pass through the node or the edge)
betweenness(net, directed=T, weights=NA)
edge_betweenness(net, directed=T, weights=NA)
centr_betw(net, directed=T, normalized=T)
