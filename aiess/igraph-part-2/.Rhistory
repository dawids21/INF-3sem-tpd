Sys.getenv()
# Use the stormofswords.csv file to read the network of "Game of Thrones"
# characters and their interactions. Plot the network and use the number
# of interactions between characters as the weight of each edge.
# Experiment with different layouts of the network. Make sure that
# you display the name of each character in the plot.
gt.df <- read.csv("stormofswords.csv", header=T, as.is=T)
library(igraph) # Load the igraph package
library(dplyr)                # Do manipulacji danymi
library(ggplot2)              # Do tworzenia wykresów
library(knitr)                # Do formatowania tabel
# Załaduj potrzebne biblioteki
library(igraph)               # Do analizy sieci
library(dplyr)                # Do manipulacji danymi
# Konfiguracja środowiska R Markdown
knitr::opts_chunk$set(
echo = TRUE,                # Pokazuj kod R w wynikowym dokumencie
warning = FALSE,            # Ukryj ostrzeżenia
message = FALSE,            # Ukryj komunikaty
fig.width = 10,             # Szerokość wykresów
fig.height = 6,             # Wysokość wykresów
fig.align = "center",       # Wycentruj wykresy
out.width = "80%"           # Szerokość wyjściowa wykresów
)
# Załaduj bibliotekę igraph
library(igraph)               # Do analizy sieci
# Ustawienie katalogu roboczego (dostosuj ścieżkę do swojego środowiska)
setwd("/home/dawid/Projects/INF-3sem-tpd/aiess/zadanie-igraph")
# Wczytanie danych o krawędziach
edges <- read.table("jmail", skip = 5, header = FALSE)
colnames(edges) <- c("from", "to")
# Wczytanie mapowania nazw klas na numery wierzchołków
node_names <- read.table("jmail.map", skip = 3, header = FALSE,
stringsAsFactors = FALSE, quote = "")
colnames(node_names) <- c("class_name", "node_id")
# Sprawdzenie, czy wszystkie wierzchołki z listy krawędzi są w mapowaniu
all_nodes <- unique(c(edges$from, edges$to))
missing_nodes <- all_nodes[!all_nodes %in% node_names$node_id]
if (length(missing_nodes) > 0) {
cat("Znaleziono wierzchołki w liście krawędzi, których brakuje w mapowaniu:", missing_nodes, "\n")
# Dodanie brakujących wierzchołków do mapowania
for (node in missing_nodes) {
node_names <- rbind(node_names, data.frame(
class_name = paste("Unknown_", node, sep=""),
node_id = node,
stringsAsFactors = FALSE
))
}
# Sortowanie mapowania według ID wierzchołków
node_names <- node_names[order(node_names$node_id), ]
}
# Skrócenie nazw klas - zostawiamy tylko ostatnią część nazwy (po ostatniej kropce)
node_names$short_name <- sapply(node_names$class_name, function(x) {
parts <- strsplit(x, "\\.")[[1]]
return(parts[length(parts)])
})
# Utworzenie grafu
g <- graph_from_data_frame(edges, directed = TRUE, vertices = node_names)
node_names
edges
# Ustawienie katalogu roboczego (dostosuj ścieżkę do swojego środowiska)
setwd("/home/dawid/Projects/INF-3sem-tpd/aiess/zadanie-igraph")
# Wczytanie danych o krawędziach
edges <- read.table("jmail", skip = 5, header = FALSE)
colnames(edges) <- c("from", "to")
# Wczytanie mapowania nazw klas na numery wierzchołków
node_names <- read.table("jmail.map", skip = 3, header = FALSE,
stringsAsFactors = FALSE, quote = "")
colnames(node_names) <- c("class_name", "node_id")
# Sprawdzenie, czy wszystkie wierzchołki z listy krawędzi są w mapowaniu
all_nodes <- unique(c(edges$from, edges$to))
missing_nodes <- all_nodes[!all_nodes %in% node_names$node_id]
if (length(missing_nodes) > 0) {
cat("Znaleziono wierzchołki w liście krawędzi, których brakuje w mapowaniu:", missing_nodes, "\n")
# Dodanie brakujących wierzchołków do mapowania
for (node in missing_nodes) {
node_names <- rbind(node_names, data.frame(
class_name = paste("Unknown_", node, sep=""),
node_id = node,
stringsAsFactors = FALSE
))
}
# Sortowanie mapowania według ID wierzchołków
node_names <- node_names[order(node_names$node_id), ]
}
# Utworzenie grafu
g <- graph_from_data_frame(edges, directed = TRUE, vertices = node_names)
edges
?graph_from_data_frame
typeof(edges)
# Konfiguracja środowiska R Markdown
knitr::opts_chunk$set(
echo = TRUE,                # Pokazuj kod R w wynikowym dokumencie
warning = FALSE,            # Ukryj ostrzeżenia
message = FALSE,            # Ukryj komunikaty
fig.width = 10,             # Szerokość wykresów
fig.height = 6,             # Wysokość wykresów
fig.align = "center",       # Wycentruj wykresy
out.width = "100%",         # Szerokość wyjściowa wykresów
comment = "#>"              # Znak komentarza w wynikach
)
# Konfiguracja środowiska R Markdown
knitr::opts_chunk$set(
echo = TRUE,                # Pokazuj kod R w wynikowym dokumencie
warning = FALSE,            # Ukryj ostrzeżenia
message = FALSE,            # Ukryj komunikaty
fig.width = 10,             # Szerokość wykresów
fig.height = 6,             # Wysokość wykresów
fig.align = "center",       # Wycentruj wykresy
out.width = "100%",         # Szerokość wyjściowa wykresów
comment = "#>"              # Znak komentarza w wynikach
)
## Wprowadzenie
W tym dokumencie przedstawiam analizę sieci zależności klas biblioteki JavaMail. Sieć ta reprezentuje zależności między klasami Java w bibliotece JavaMail 1.4.3, gdzie węzły reprezentują klasy, a krawędzie reprezentują zależności między nimi.
## Przygotowanie danych
Najpierw załadujemy niezbędne biblioteki i dane:
```{r load_libraries}
# Załaduj bibliotekę igraph
library(igraph)
# Wczytaj dane o krawędziach (pomijając komentarze)
edges <- read.table("jmail", skip = 5, header = FALSE)
colnames(edges) <- c("from", "to")
edges
typeof(edges)
# Wczytaj mapowanie identyfikatorów na nazwy klas (pomijając komentarze)
node_names <- read.table("jmail.map", skip = 3, header = FALSE, sep = " ", quote = "")
colnames(node_names) <- c("name", "id")
# Skróć nazwy klas, aby były bardziej czytelne
# Usuń prefiks "com.sun.mail." i "javax.mail."
node_names$short_name <- gsub("^(com\\.sun\\.mail\\.|javax\\.mail\\.)", "", node_names$name)
# Usuń prefiksy pakietów, zostawiając tylko nazwę klasy
node_names$short_name <- gsub("^[a-z]+\\.", "", node_names$short_name)
# Jeśli nazwa jest nadal zbyt długa, weź tylko ostatnią część (nazwę klasy)
node_names$short_name <- sapply(strsplit(node_names$short_name, "\\."), tail, 1)
# Utwórz graf z danych o krawędziach
g <- graph_from_data_frame(edges, directed = TRUE, vertices = node_names)
node_names
typeof(node_names)
# Wczytaj dane o krawędziach (pomijając komentarze)
edges <- as.data.frame(read.table("jmail", skip = 5, header = FALSE))
colnames(edges) <- c("from", "to")
# Wczytaj mapowanie identyfikatorów na nazwy klas (pomijając komentarze)
node_names <- as.data.frame(read.table("jmail.map", skip = 3, header = FALSE, sep = " ", quote = ""))
colnames(node_names) <- c("name", "id")
edges
typeof(edges)
setwd("/home/dawid/Projects/INF-3sem-tpd/aiess/igraph-part-2")
nodes <- read.csv("d1-nodes.csv", header=T, as.is=T)
typeof(nodes)
nodes
links <- read.csv("d1-edges.csv", header=T, as.is=T)
typeof(links)
links
# Wczytaj dane o krawędziach (pomijając komentarze)
edges <- read.table("jmail", skip = 5, header = FALSE)
colnames(edges) <- c("from", "to")
# Utwórz graf z danych o krawędziach
g <- graph_from_data_frame(edges, directed = TRUE)#, vertices = node_names)
# Podstawowe informacje o sieci
cat("Liczba wierzchołków:", vcount(g), "\n")
cat("Liczba krawędzi:", ecount(g), "\n")
cat("Gęstość sieci:", edge_density(g), "\n")
cat("Średni stopień wierzchołków:", mean(degree(g)), "\n")
# Oblicz stopnie wierzchołków
node_degrees <- degree(g)
# Ustaw wielkość wierzchołków proporcjonalną do stopnia
vertex_sizes <- 5 + node_degrees * 0.5
# Wizualizacja sieci
plot(g,
vertex.size = vertex_sizes,
vertex.label = V(g)$short_name,
vertex.label.cex = 0.6,
vertex.label.color = "black",
vertex.color = "lightblue",
vertex.frame.color = "white",
edge.arrow.size = 0.2,
edge.color = "gray70",
layout = layout_with_fr,
main = "Sieć zależności klas JavaMail")
nodes <- read.csv("d1-nodes.csv", header=T, as.is=T)
links <- read.csv("d1-edges.csv", header=T, as.is=T)
nodes
links
node_names
# Utwórz graf z danych o krawędziach
g <- graph_from_data_frame(edges, directed = TRUE), vertices = node_names)
# Utwórz graf z danych o krawędziach
g <- graph_from_data_frame(edges, directed = TRUE, vertices = node_names)
# Sprawdź, czy wszystkie wierzchołki z listy krawędzi są w mapowaniu
all_vertices <- unique(c(edges$from, edges$to))
missing_vertices <- setdiff(all_vertices, node_names$id)
# Wczytaj dane o krawędziach (pomijając komentarze)
edges <- read.table("jmail", skip = 5, header = FALSE)
colnames(edges) <- c("from", "to")
# Wczytaj mapowanie identyfikatorów na nazwy klas (pomijając komentarze)
node_names <- read.table("jmail.map", skip = 3, header = FALSE, sep = " ", quote = "")
colnames(node_names) <- c("name", "id")
# Zmień kolejność kolumn - id powinno być pierwszą kolumną
node_names <- node_names[, c("id", "name")]
# Skróć nazwy klas, aby były bardziej czytelne
# Usuń prefiks "com.sun.mail." i "javax.mail."
node_names$short_name <- gsub("^(com\\.sun\\.mail\\.|javax\\.mail\\.)", "", node_names$name)
# Usuń prefiksy pakietów, zostawiając tylko nazwę klasy
node_names$short_name <- gsub("^[a-z]+\\.", "", node_names$short_name)
# Jeśli nazwa jest nadal zbyt długa, weź tylko ostatnią część (nazwę klasy)
node_names$short_name <- sapply(strsplit(node_names$short_name, "\\."), tail, 1)
# Sprawdź, czy wszystkie wierzchołki z listy krawędzi są w mapowaniu
all_vertices <- unique(c(edges$from, edges$to))
missing_vertices <- setdiff(all_vertices, node_names$id)
# Jeśli brakuje wierzchołków, dodaj je do mapowania
if (length(missing_vertices) > 0) {
missing_df <- data.frame(
id = missing_vertices,
name = paste0("Unknown_", missing_vertices),
short_name = paste0("Unknown_", missing_vertices)
)
node_names <- rbind(node_names, missing_df)
}
# Utwórz graf z danych o krawędziach
g <- graph_from_data_frame(edges, directed = TRUE, vertices = node_names)
?read.table
# Konfiguracja środowiska R Markdown
knitr::opts_chunk$set(
echo = TRUE,                # Pokazuj kod R w wynikowym dokumencie
warning = FALSE,            # Ukryj ostrzeżenia
message = FALSE,            # Ukryj komunikaty
fig.width = 10,             # Szerokość wykresów
fig.height = 6,             # Wysokość wykresów
fig.align = "center",       # Wycentruj wykresy
out.width = "100%",         # Szerokość wyjściowa wykresów
)
# Konfiguracja środowiska R Markdown
knitr::opts_chunk$set(
echo = TRUE,                # Pokazuj kod R w wynikowym dokumencie
warning = FALSE,            # Ukryj ostrzeżenia
message = FALSE,            # Ukryj komunikaty
fig.width = 10,             # Szerokość wykresów
fig.height = 6,             # Wysokość wykresów
fig.align = "center",       # Wycentruj wykresy
out.width = "100%",         # Szerokość wyjściowa wykresów
)
# Konfiguracja środowiska R Markdown
knitr::opts_chunk$set(
echo = TRUE,                # Pokazuj kod R w wynikowym dokumencie
warning = FALSE,            # Ukryj ostrzeżenia
message = FALSE,            # Ukryj komunikaty
fig.width = 10,             # Szerokość wykresów
fig.height = 6,             # Wysokość wykresów
fig.align = "center",       # Wycentruj wykresy
out.width = "100%"         # Szerokość wyjściowa wykresów
)
# Konfiguracja środowiska R Markdown
knitr::opts_chunk$set(
echo = TRUE,                # Pokazuj kod R w wynikowym dokumencie
warning = FALSE,            # Ukryj ostrzeżenia
message = FALSE,            # Ukryj komunikaty
fig.width = 10,             # Szerokość wykresów
fig.height = 6,             # Wysokość wykresów
fig.align = "center",       # Wycentruj wykresy
out.width = "100%"          # Szerokość wyjściowa wykresów
)
library(igraph)
edges <- read.table("jmail", skip = 5, sep = " ")
colnames(edges) <- c("from", "to")
node_names <- read.table("jmail.map", skip = 3, sep = " ")
colnames(node_names) <- c("name", "id")
edges <- read.table("jmail", skip = 5, sep = " ")
colnames(edges) <- c("from", "to")
colnames(node_names) <- c("name", "id")
node_names <- node_names[, c("id", "name")]
View(node_names)
edges <- read.table("jmail", skip = 5, sep = " ")
nodes <- read.table("jmail.map", skip = 3, sep = " ")
nodes <- nodes[, c("id", "name")]
# Skróć nazwy klas, aby były bardziej czytelne
# Usuń prefiks "com.sun.mail." i "javax.mail."
nodes$short_name <- gsub("^(com\\.sun\\.mail\\.|javax\\.mail\\.)", "", node_names$name)
# Jeśli nazwa jest nadal zbyt długa, weź tylko ostatnią część (nazwę klasy)
nodes$short_name <- sapply(strsplit(nodes$short_name, "\\."), tail, 1)
nodes <- nodes[, c("id", "name")]
edges <- read.table("jmail", skip = 5, sep = " ")
nodes <- read.table("jmail.map", skip = 3, sep = " ")
colnames(nodes) <- c("name", "id")
nodes <- nodes[, c("id", "name")]
# Skróć nazwy klas, aby były bardziej czytelne
# Usuń prefiks "com.sun.mail." i "javax.mail."
nodes$short_name <- gsub("^(com\\.sun\\.mail\\.|javax\\.mail\\.)", "", node_names$name)
# Usuń prefiksy pakietów, zostawiając tylko nazwę klasy
nodes$short_name <- gsub("^[a-z]+\\.", "", nodes$short_name)
# Jeśli nazwa jest nadal zbyt długa, weź tylko ostatnią część (nazwę klasy)
nodes$short_name <- sapply(strsplit(nodes$short_name, "\\."), tail, 1)
g <- graph_from_data_frame(edges, directed = TRUE, vertices = nodes)
knitr::opts_chunk$set(
echo = TRUE,                # Pokazuj kod R w wynikowym dokumencie
warning = FALSE,            # Ukryj ostrzeżenia
message = FALSE,            # Ukryj komunikaty
fig.width = 12,             # Zwiększona szerokość wykresów
fig.height = 8,             # Zwiększona wysokość wykresów
fig.align = "center",       # Wycentruj wykresy
out.width = "90%"           # Zwiększona szerokość wyjściowa wykresów
)
library(igraph)
plot(dolphins_graph,
vertex.size = vertex_degrees * 2,
vertex.label = V(dolphins_graph)$label,  # Etykiety wierzchołków
#vertex.label.cex = 0.7,  # Rozmiar etykiet
#vertex.color = "lightblue",  # Kolor wierzchołków
#vertex.frame.color = "white",  # Kolor obramowania wierzchołków
#edge.color = "gray",  # Kolor krawędzi
#edge.width = 1,  # Szerokość krawędzi
layout = layout_kk)  # Używamy obliczonego układu Kamada-Kawai
plot(dolphins_graph,
vertex.size = vertex_degrees * 2,
vertex.label = V(dolphins_graph)$label,  # Etykiety wierzchołków
#vertex.label.cex = 0.7,  # Rozmiar etykiet
#vertex.color = "lightblue",  # Kolor wierzchołków
#vertex.frame.color = "white",  # Kolor obramowania wierzchołków
#edge.color = "gray",  # Kolor krawędzi
#edge.width = 1,  # Szerokość krawędzi
layout = layout_kk)  # Używamy obliczonego układu Kamada-Kawai
dolphins_graph <- read_graph("dolphins.gml", format = "gml")
vertex_degrees <- degree(dolphins_graph)
layout_kk <- layout_with_kk(dolphins_graph)
plot(dolphins_graph,
vertex.size = vertex_degrees * 2,
vertex.label = V(dolphins_graph)$label,  # Etykiety wierzchołków
vertex.label.cex = 0.7,  # Rozmiar etykiet
vertex.color = "lightblue",  # Kolor wierzchołków
#vertex.frame.color = "white",  # Kolor obramowania wierzchołków
layout = layout_kk)  # Używamy obliczonego układu Kamada-Kawai
vertex_degrees <- degree(dolphins_graph)
layout_kk <- layout_with_kk(dolphins_graphm kkconst = vcount(dolphins_graph) * 2)
layout_kk <- layout_with_kk(dolphins_graph, kkconst = vcount(dolphins_graph) * 2)
plot(dolphins_graph,
vertex.size = vertex_degrees * 2,
vertex.label = V(dolphins_graph)$label,  # Etykiety wierzchołków
vertex.label.cex = 0.7,  # Rozmiar etykiet
vertex.color = "lightblue",  # Kolor wierzchołków
#vertex.frame.color = "white",  # Kolor obramowania wierzchołków
layout = layout_kk)  # Używamy obliczonego układu Kamada-Kawai
deg_dist <- degree_distribution(dolphins_graph, cumulative = FALSE)
deg_dist <- degree_distribution(dolphins_graph, cumulative = FALSE)
barplot(deg_dist,
main = "Rozkład stopni wierzchołków",
xlab = "Stopień",
ylab = "Częstotliwość",
col = "steelblue",
border = "white")
barplot(deg_dist,
xlab = "Stopień",
ylab = "Częstotliwość",
col = "steelblue")
barplot(deg_dist,
xlab = "Stopień",
ylab = "Częstotliwość",
col = "lightblue")
deg_dist <- degree_distribution(dolphins_graph, cumulative = FALSE)
# Tworzenie wektora z wartościami stopni (0 do maksymalnego stopnia)
degrees <- 0:(length(deg_dist)-1)
# Wizualizacja rozkładu stopni z wartościami na osi X
barplot(deg_dist,
xlab = "Stopień",
ylab = "Częstotliwość",
col = "lightblue",
names.arg = degrees,  # Dodanie wartości stopni na osi X
xaxt = "n")  # Wyłączenie domyślnej osi X
# Dodanie osi X z wartościami
axis(side = 1, at = 1:length(deg_dist), labels = degrees)
size(deg_dist)
length(deg_dist)
barplot(names = 0:length(deg_dist),
values = deg_dist,
xlab = "Stopień",
ylab = "Częstotliwość",
col = "lightblue")
barplot(name = 0:length(deg_dist),
value = deg_dist,
xlab = "Stopień",
ylab = "Częstotliwość",
col = "lightblue")
barplot(names = 0:length(deg_dist),
height = deg_dist,
xlab = "Stopień",
ylab = "Częstotliwość",
col = "lightblue")
0:length(deg_dist)
degrees
barplot(names = 0:(length(deg_dist)-1),
height = deg_dist,
xlab = "Stopień",
ylab = "Częstotliwość",
col = "lightblue")
deg_dist <- degree_distribution(dolphins_graph)
barplot(names = 0:(length(deg_dist)-1),
height = deg_dist,
xlab = "Stopień",
ylab = "Częstotliwość",
col = "lightblue")
diam <- get_diameter(dolphins_graph, directed = FALSE)
vcol <- rep("lightblue", vcount(dolphins_graph))
knitr::opts_chunk$set(
echo = TRUE,                # Pokazuj kod R w wynikowym dokumencie
warning = FALSE,            # Ukryj ostrzeżenia
message = FALSE,            # Ukryj komunikaty
fig.width = 12,             # Zwiększona szerokość wykresów
fig.height = 8,             # Zwiększona wysokość wykresów
fig.align = "center",       # Wycentruj wykresy
out.width = "90%"           # Zwiększona szerokość wyjściowa wykresów
)
library(igraph)
library(igraph)
```{r load_data}
dolphins_graph <- read_graph("dolphins.gml", format = "gml")
vertex_degrees <- degree(dolphins_graph)
layout_kk <- layout_with_kk(dolphins_graph)
plot(dolphins_graph,
vertex.size = vertex_degrees * 2,
vertex.label = V(dolphins_graph)$label,
vertex.label.cex = 0.7,
vertex.color = "lightblue",
layout = layout_kk)
deg_dist <- degree_distribution(dolphins_graph)
barplot(names = 0:(length(deg_dist)-1),
height = deg_dist,
xlab = "Stopień",
ylab = "Częstotliwość",
col = "lightblue")
diam <- get_diameter(dolphins_graph, directed = FALSE)
vcol <- rep("lightblue", vcount(dolphins_graph))
vcol[diam] <- "gold"
ecol <- rep("gray", ecount(dolphins_graph))
plot(dolphins_graph,
vertex.size = vertex_degrees * 2,
vertex.label = V(dolphins_graph)$label,
vertex.label.cex = 0.7,
vertex.color = vcol,
edge.color = ecol,
layout = layout_kk)
clusters <- cluster_fast_greedy(as.undirected(dolphins_graph))
V(dolphins_graph)$community <- clusters$membership
colrs <- adjustcolor(c("steelblue", "tomato", "gold", "yellowgreen"), alpha = 0.7)
clusters <- cluster_fast_greedy(as.undirected(dolphins_graph))
V(dolphins_graph)$community <- clusters$membership
plot(dolphins_graph,
vertex.size = vertex_degrees * 2,
vertex.label = V(dolphins_graph)$label,
vertex.label.cex = 0.7,
vertex.color = colrs[V(dolphins_graph)$community],
layout = layout_kk)
